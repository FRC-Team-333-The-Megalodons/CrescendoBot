Robot notes for later

Robot (minus chassis) should operate in a certain order to prevent robot suicide (this robot is really accident prone)
1. Pivot moves
2. Trolley moves
3. Wrist moves
4. Intake moves (when applicable)
NOTE: THIS IS NOT THE CASE FOR ALL SCENARIOS

In the future, this may change as we see that some functions can run alongside others (e.g: wrist and intake).
We would like it if all the funtions to run in parallel with each other, as long as they DO NOT interfere with each other
We do not live in a perfect world. We are on Team 333

Robot States:
    Home:
        - pivot is parallel to the chassis
        - trolley is tucked in (home position)
        - wrist is tucked in (shooting position)
    Shooting:
        - pivot is at an angle such that the shooter is pointing up
        - trolley is tucked in (home position)
        - wrist is tucked in (shooting position)
        - intake wheels feeds note to shooter when ready to score
    Intake:
        - pivot is at an angle such that the shooter is pointing up
        - trolley extends out
        - wrist comes down
        - intake wheels intake until the note hits encoders
    Amp:
        - pivot is at an angle such that the shooter is pointing down
        - trolley extends out
        - wrist comes down
        - intake wheels eject note when robot is ready to score
    Climb:
        - pivot is at an angle such that the shooter is pointing down
        - trolley extends out
        - robot drives up to the chain such that the hooks under the intake are above the chain
        - when drivers are ready, trolley retracts, hooks catch the chain and robot is in the air

Driving:
    - (For now) operator (or robot) should go home after completing actions to avoid robot suicide
    - Should the robot automatically go home or have the operator go home?
        - It might cause less hiccups if the operator tells the robot to go home rather than the robot's default state being go home
    - We're gonna need a manual overide button. Is that on the controller (PS button perhaps) or on the Driver's Station? (perhaps both?)
    - Should climbing be automatic or semi-automatic?
        - Automatic: operator holds climb button, robot preforms the entire climb operation itself
        - Semi-automatic: operator uses 2 inputs to climb (e.g: 2 buttons or the sticks/triggers)
    - Go to position button?
        - We can use paths generated from pathplanner to achieve this, making lineups a bit easier (needs to be tested)

LED States:
    - Default: Some fancy shmancy color pattern or no color
    - Intaking: Solid red until a note has been aquired, then starts rapidly blinking green
    - Shooting (rev up): Solid red until limelight detects that robot is in range then changes to solid green
    - Shooting (actually): Solid green
    - Amplify Speaker: Rapidly blink purple (operator will hold down the touchpad)
    - Trap: Solid red until limelight detects that robot is in range then changes to solid green

Automation:
NOTE: This is not in any particular order, we'll do the easiest one out of the bunch first and work from there
We will use the limelight to track the april tags on the field and we would like to use that information for a few things:
    1. Pose Estimation - Robot can be accurately tracked when driving up and down the field. Could be useful for:
        - Doing certain task when the robot is in certain parts of the field (e.g: reving up the shooter in the wing)
    2. Auto-align to target - Robot will turn/drive towards its intended target to make lineups much easier
    3. Auto-ajust to target - Robot will ajust pivot to and put it into scoring position
        - There are two ways to handle this:
            a. Constantly adjust when in range of target and keep adjusting as we move further and away from target
            b. Adjust to target when in rannge, but to setpoints (e.g: when in range of speaker, adjust to subwoffer shot)
        - We will use whatever way we can get working within a resonable time
    4. Driver Assist - Track our targets, but instead of doing robot actions, flash LEDs a certain color to let the driver know we are ready to do something



Josh's notes:

- Following today's conversation about the various Commands that transition between states, we've identified the following total required commands:
  - Home-to-Intake
  - Intake-to-Home
  - Intake-to-Amp
  - Intake-to-Climb* (this might be basically the same as Intake-to-Amp)
  - Home-to-Shoot
  - Shoot-to-Home
  - Home-to-Amp
  - Amp-to-Home
  - Amp-to-Intake
  - Home-to-Climb* (this might be basically the same as Home-to-Amp)
  - Climb-to-Home* (this might be basically the same as Amp-to-Home)

- What are the various "states" we can be in?
  - WristPartiallyDown+TrolleyBack+PivotUp [Intake Position]
  - WristUp+TrolleyFront+PivotMid [Home Position]
  - WristUp+TrolleyFront+PivotPartiallyUp  [Shoot Position]
  - WristPartiallyDown+TrolleyBack+PivotMostlyDown [Amp Position]
  - WristCompletelyDown+TrolleyBack+PivotDown(Vertical) [ClimbPosition]

- Are there "substates" you need to worry about? 
  - Not if we set up the actions within a Command to all happen in parallel, so long as there's a "don't move" on conditional limits.
  - Our hard limits are:
    - Wrist: Up: flush; 
             Down: If the Pivot is Up, must be limited so it doesnt hit the bumper/internal-wiring (I dont think it even matters where the trolley is)
    - Trolley: Back: flush; 
               Forward: No further than home position (i.e. as far as it can go with wrist flush up)
    - Pivot: Down: Slightly further than vertical (i.e. amp position); 
             Up: Slightly further than horizontal (i.e. shoot position)
  - Our conditional limits are:
    - Wrist: Down: If the Pivot is up, must be limited (I don't think it even matters where the trolley is back or not)
    - Pivot: Down: If the Trolley is Forward, must be limited (I don't think it even matters where the wrist is)
             Up: If the trolley is Back, must be limited (I don't think it even matters where the wrist is)
    - Trolley: Back: If the Pivot is up, must be limited 
               Forward: If the Pivot is down, must be limited